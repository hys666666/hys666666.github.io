<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CodeSong By Blog</title>
  
  <subtitle>Welcome to my world!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://codesong.work/"/>
  <updated>2020-04-22T11:01:45.000Z</updated>
  <id>https://codesong.work/</id>
  
  <author>
    <name>CodeSong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>蓝桥2013真题C++B组（三）</title>
    <link href="https://codesong.work/posts/c73a0382.html"/>
    <id>https://codesong.work/posts/c73a0382.html</id>
    <published>2020-04-22T10:31:43.000Z</published>
    <updated>2020-04-22T11:01:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第39级台阶"><a href="#第39级台阶" class="headerlink" title="第39级台阶"></a>第39级台阶</h1><p>&emsp;&emsp;小明刚刚看完电影《第39级台阶》，离开电影院的时候，他数了数礼堂前的台阶数，恰好是39级!<br><br>    站在台阶前，他突然又想着一个问题：<br><br>&emsp;&emsp;如果我每一步只能迈上1个或2个台阶。先迈左脚，然后左右交替，最后一步是迈右脚，也就是说一共要走偶数步。那么，上完39级台阶，有多少种不同的上法呢？<br></p><p><strong>很明显是类似斐波那契数的东西<code>f(n){return f(n-1)+f(n-2);}</code>，可以用递归来做，模拟迈步子，当把所有台阶都上完时（每一步都可以迈一个台阶或者两个台阶），再判断是否是偶数步数即可，以下为代码部分：</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">/*****************************</span></span><br><span class="line"><span class="comment"> * My Blog: CodeSong.work    *</span></span><br><span class="line"><span class="comment"> *****************************</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> step)</span></span>&#123;<span class="comment">//n为剩余台阶数，step为已走步数</span></span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;step%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">        ans++;</span><br><span class="line">    f(n<span class="number">-1</span>,step+<span class="number">1</span>);</span><br><span class="line">    f(n<span class="number">-2</span>,step+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    f(<span class="number">39</span>,<span class="number">0</span>);<span class="comment">//初始总共有39级台阶，已走的步数为零</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第39级台阶&quot;&gt;&lt;a href=&quot;#第39级台阶&quot; class=&quot;headerlink&quot; title=&quot;第39级台阶&quot;&gt;&lt;/a&gt;第39级台阶&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;小明刚刚看完电影《第39级台阶》，离开电影院的时候，他数了数礼堂前的台阶数，恰好是3
      
    
    </summary>
    
      <category term="蓝桥杯真题" scheme="https://codesong.work/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98/"/>
    
    
      <category term="蓝桥杯" scheme="https://codesong.work/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
      <category term="算法" scheme="https://codesong.work/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C/C++" scheme="https://codesong.work/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥2013真题C++B组（二）</title>
    <link href="https://codesong.work/posts/8a24a0d0.html"/>
    <id>https://codesong.work/posts/8a24a0d0.html</id>
    <published>2020-04-22T10:31:36.000Z</published>
    <updated>2020-04-22T11:04:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="马虎的算式"><a href="#马虎的算式" class="headerlink" title="马虎的算式"></a>马虎的算式</h1><p>小明是个急性子，上小学的时候经常把老师写在黑板上的题目抄错了。<br>有一次，老师出的题目是：36 x 495 = ?<br>他却给抄成了：396 x 45 = ?<br>但结果却很戏剧性，他的答案竟然是对的！！<br>因为 36 * 495 = 396 * 45 = 17820<br>类似这样的巧合情况可能还有很多，比如：27 * 594 = 297 * 5<br>假设 a b c d e 代表1~9不同的5个数字（注意是各不相同的数字，且不含0）<br>能满足形如： ab * cde = adb * ce 这样的算式一共有多少种呢？<br>请你利用计算机的优势寻找所有的可能，并回答不同算式的种类数。<br>满足乘法交换律的算式计为不同的种类，所以答案肯定是个偶数。<br>答案直接通过浏览器提交。<br>注意：只提交一个表示最终统计种类数的数字，不要提交解答过程或其它多余的内容。<br>能满足形如：ab * cde = adb * ce这样的算式一共有多少种？</p><hr><p>既然左右替换算是一种，直接枚举出所有数的组合，然后判断计算结果是否相等即可，非常简单，以下为代码部分：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">/*****************************</span></span><br><span class="line"><span class="comment"> * My Blog: CodeSong.work    *</span></span><br><span class="line"><span class="comment"> *****************************</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;<span class="comment">//记录答案</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;<span class="number">10</span>;++a)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt; <span class="number">10</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(b==a)    <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt; <span class="number">10</span>; c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(c==a||c==b)    <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt; <span class="number">10</span>; d++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(d==a||d==b||d==c)    <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">1</span>; e &lt; <span class="number">10</span>; e++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(e==a||e==b||e==c||e==d)    <span class="keyword">continue</span>;</span><br><span class="line">                        <span class="comment">//ab * cde = adb * ce </span></span><br><span class="line">                        <span class="keyword">int</span> t1 = (a*<span class="number">10</span> + b)*(c*<span class="number">100</span>+d*<span class="number">10</span>+e);</span><br><span class="line">                        <span class="keyword">int</span> t2 = (a*<span class="number">100</span>+d*<span class="number">10</span>+b)*(c*<span class="number">10</span>+e);</span><br><span class="line">                        <span class="keyword">if</span>(t1==t2)</span><br><span class="line">                            ans++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;马虎的算式&quot;&gt;&lt;a href=&quot;#马虎的算式&quot; class=&quot;headerlink&quot; title=&quot;马虎的算式&quot;&gt;&lt;/a&gt;马虎的算式&lt;/h1&gt;&lt;p&gt;小明是个急性子，上小学的时候经常把老师写在黑板上的题目抄错了。&lt;br&gt;有一次，老师出的题目是：36 x 495 = 
      
    
    </summary>
    
      <category term="蓝桥杯真题" scheme="https://codesong.work/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98/"/>
    
    
      <category term="蓝桥杯" scheme="https://codesong.work/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
      <category term="算法" scheme="https://codesong.work/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C/C++" scheme="https://codesong.work/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥2013真题C++B组（一）</title>
    <link href="https://codesong.work/posts/ba324c08.html"/>
    <id>https://codesong.work/posts/ba324c08.html</id>
    <published>2020-04-22T10:31:26.000Z</published>
    <updated>2020-04-22T10:39:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高斯日记"><a href="#高斯日记" class="headerlink" title="高斯日记"></a>高斯日记</h1><p>&emsp;&emsp;大数学家高斯有个好习惯：无论如何都要记日记。他的日记有个与众不同的地方，他从不注明年月日，而是用一个整数代替，<br>比如：4210。后来人们知道，那个整数就是日期，它表示那一天是高斯出生后的第几天。<br><br>&emsp;&emsp;这或许也是个好习惯，它时时刻刻提醒着主人：日子又过去一天，还有多少时光可以用于浪费呢？<br><br>&emsp;&emsp;高斯出生于：1777年4月30日。在高斯发现的一个重要定理的日记上标注着：5343，因此可算出那天是：1791年12月15日。<br><br>&emsp;&emsp;高斯获得博士学位的那天日记上标着：8113。请你算出高斯获得博士学位的年月日。<br><br>提交答案的格式是: <strong>yyyy-mm-dd</strong>, 例如: 1980-03-21</p><hr><p>这道题非常简单，由于只提交一个日期，那直接利用程序从出生那天开始跑一遍要求的次数就能够得到答案了。有两点：<br><br><strong>一、需要检查高斯出生的当天算不算是一天，可以拿题目中的例子来测试你的算法（这一步必须检查不然错了冤死了）</strong><br><br><strong>二、由于日期有一些规定，所以需要特别处理：闰年，平年，大月，小月，月末，年末；</strong><br></p><blockquote><p><em>关于闰年，定制闰年规则不是随意设置的。<br></em>首先我们要知道，年的概念，是地球围绕太阳一周的时间（所谓公转周期）称为一年，这个周期是相当稳定的，很长时间也不会变动1秒，但是很遗憾zhidao的是这个周期并不能被一天的时间整除，真正的一年其实是365.2423天（目前）。<em><br></em>所以，如果每年定义为365天的话，1年就会多出0.2423天，4年就会多出0.9692天，非常接近1天，这样闰年就出现了，也就是每4年要有1年设置为366天，来抵消这多出的1天。规则为：<em><br><br>(1)<strong>如果年份能被4整除，则该年计为闰年</strong><br></em>可是，假如不做调整的话，当400年的时候，累计才多出96.92天，闰年的设置却多出来100天，所权以要在400年内，再撤销3个闰年。怎么撤销呢？就有了下面这个规则：<em><br>(2)<strong>如果年份能被100整除，则不计为闰年</strong><br></em>问题又来了，400年里有4个，又少了一个，所以再加一个规则就是：<em><br><br>(3)<strong>如果年份能被400整除，则计为闰年</strong><br></em>这样每400年里设置了97个闰年，误差被调整到400年仅有0.08天，而设置规则也并不是很麻烦，所以一直沿用了下来。*</p></blockquote><p>特别注意本题难点仅在逻辑判断,以下为代码部分：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">/*****************************</span></span><br><span class="line"><span class="comment"> * My Blog: CodeSong.work    *</span></span><br><span class="line"><span class="comment"> *****************************</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeapYear</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">//返回是否是闰年的判断</span></span><br><span class="line">    <span class="keyword">return</span> ((n % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">0</span>) || n % <span class="number">400</span> == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> year = <span class="number">1777</span>;<span class="comment">//年</span></span><br><span class="line">    <span class="keyword">int</span> month = <span class="number">4</span>;<span class="comment">//月</span></span><br><span class="line">    <span class="keyword">int</span> day = <span class="number">30</span>;<span class="comment">//日</span></span><br><span class="line">    <span class="keyword">int</span> dSum = <span class="number">8113</span>;<span class="comment">//天数</span></span><br><span class="line">    <span class="comment">//月份的逻辑判断为容易出错的地方,还有日期的改变</span></span><br><span class="line">    <span class="keyword">while</span> (--dSum)</span><br><span class="line">    &#123;<span class="comment">//先判断是否为月底</span></span><br><span class="line">        <span class="keyword">if</span> (month == <span class="number">12</span> &amp;&amp; day == <span class="number">31</span>)</span><br><span class="line">        &#123; <span class="comment">//判断是否是一年中最后的一天，year加1，month和day重置为1</span></span><br><span class="line">            year += <span class="number">1</span>;</span><br><span class="line">            month = <span class="number">1</span>;</span><br><span class="line">            day = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((month == <span class="number">1</span> || month == <span class="number">3</span> || month == <span class="number">5</span> || month == <span class="number">7</span> || month == <span class="number">8</span> || month == <span class="number">10</span>) &amp;&amp; day == <span class="number">31</span>)</span><br><span class="line">        &#123; <span class="comment">//判断是否是大月中的最后一天</span></span><br><span class="line">            month += <span class="number">1</span>;</span><br><span class="line">            day = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((month == <span class="number">4</span> || month == <span class="number">6</span> || month == <span class="number">9</span> || month == <span class="number">11</span>) &amp;&amp; day == <span class="number">30</span>)</span><br><span class="line">        &#123; <span class="comment">//判断是否是小月中的最后一天</span></span><br><span class="line">            month += <span class="number">1</span>;</span><br><span class="line">            day = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (month == <span class="number">2</span> &amp;&amp; isLeapYear(year) &amp;&amp; day == <span class="number">29</span>)</span><br><span class="line">        &#123; <span class="comment">//单独处理闰年的月底</span></span><br><span class="line">            month += <span class="number">1</span>;</span><br><span class="line">            day = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (month == <span class="number">2</span> &amp;&amp; !isLeapYear(year) &amp;&amp; day==<span class="number">28</span>)</span><br><span class="line">        &#123; <span class="comment">//单独处理平年的月底</span></span><br><span class="line">            month += <span class="number">1</span>;</span><br><span class="line">            day = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        day++;<span class="comment">//非月底则day直接增加一</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d-%d-%d\n"</span>, year, month, day);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;高斯日记&quot;&gt;&lt;a href=&quot;#高斯日记&quot; class=&quot;headerlink&quot; title=&quot;高斯日记&quot;&gt;&lt;/a&gt;高斯日记&lt;/h1&gt;&lt;p&gt;&amp;emsp;&amp;emsp;大数学家高斯有个好习惯：无论如何都要记日记。他的日记有个与众不同的地方，他从不注明年月日，而是用一个
      
    
    </summary>
    
      <category term="蓝桥杯真题" scheme="https://codesong.work/categories/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%9C%9F%E9%A2%98/"/>
    
    
      <category term="蓝桥杯" scheme="https://codesong.work/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
      <category term="算法" scheme="https://codesong.work/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="C/C++" scheme="https://codesong.work/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>个人博客部署免费的https安全证书</title>
    <link href="https://codesong.work/posts/ce68fd7a.html"/>
    <id>https://codesong.work/posts/ce68fd7a.html</id>
    <published>2020-03-26T12:59:04.000Z</published>
    <updated>2020-04-22T10:58:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人博客怎么部署免费的https安全证书？"><a href="#个人博客怎么部署免费的https安全证书？" class="headerlink" title="个人博客怎么部署免费的https安全证书？"></a>个人博客怎么部署免费的https安全证书？</h1><p>&emsp;&emsp;首先需要去阿里云申请一个免费的安全证书 <a href="https://www.aliyun.com/product/cas?source=5176.11533457&amp;userCode=l1qstn8f&amp;type=copy" target="_blank" rel="noopener">我是一个超链接</a></p><p>选择免费的证书：<img src="https://s1.ax1x.com/2020/03/26/G9PJte.png" alt="https1"></p><p>免费购买后，在证书控制台申请证书：<img src="https://s1.ax1x.com/2020/03/26/G9Fms1.png" alt="https2"><br>后面接着提交信息，验证，几分钟就会成功了不再阐述 </p><h1 id="将证书部署到服务器上"><a href="#将证书部署到服务器上" class="headerlink" title="将证书部署到服务器上"></a>将证书部署到服务器上</h1><p><strong>服务器系统：Ubuntu</strong></p><p><strong>Web服务器：Apache2</strong></p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>从SSL证书控制台下载相应版本的证书</li><li>服务器已安装Open SLL（反正我的是默认有了的）</li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="在Apache2目录下创建个目录并且将证书文件复制进去"><a href="#在Apache2目录下创建个目录并且将证书文件复制进去" class="headerlink" title="在Apache2目录下创建个目录并且将证书文件复制进去"></a>在Apache2目录下创建个目录并且将证书文件复制进去</h3><pre><code>mkdir /ect/apache2/sslcp *public.crt /etc/apache2/sslcp *Name.key /etc/apache2/ssl</code></pre><h3 id="启用SSL模块"><a href="#启用SSL模块" class="headerlink" title="启用SSL模块"></a>启用SSL模块</h3><pre><code>sudo a2enmod ssl</code></pre><h3 id="修改SSL配置文件default-ssl-conf"><a href="#修改SSL配置文件default-ssl-conf" class="headerlink" title="修改SSL配置文件default-ssl.conf"></a>修改SSL配置文件default-ssl.conf</h3><pre><code>vi /etc/apache2/sites-available/default-ssl.conf</code></pre><h4 id="参数修改如下："><a href="#参数修改如下：" class="headerlink" title="参数修改如下："></a><strong>参数修改如下：</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">IfModules</span> <span class="attr">mod_ssl.c</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:443</span>&gt;</span>  </span><br><span class="line">ServerName   #修改为证书绑定的域名www.YourDomainName.com。</span><br><span class="line">SSLCertificateFile /etc/apache2/ssl/www.YourDomainName_public.crt   #将/etc/apache2/ssl/www.YourDomainName.com_public.crt替换为证书文件路径+证书文件名。</span><br><span class="line">SSLCertificateKeyFile /etc/ssl/apache2/www.YourDomainName.com.key   #将/etc/apache2/ssl/www.YourDomainName.com.key替换为证书密钥文件路径+证书密钥文件名。</span><br><span class="line">SSLCertificateChainFile /etc/apache2/ssl/www.YourDomainName.com_chain.crt  #将/etc/apache2/ssl/www.YourDomainName.com_chain.crt替换为证书链文件路径+证书链文件名。</span><br></pre></td></tr></table></figure><ul><li>sites-available：该目录存放的是可用的虚拟主机；</li><li>sites-enabled：该目录存放的是已经启用的虚拟主机。    </li></ul><h3 id="将default-ssl-conf映射至-etc-apache2-sites-enabled文件夹中建立软链接、实现二者之间的自动关联"><a href="#将default-ssl-conf映射至-etc-apache2-sites-enabled文件夹中建立软链接、实现二者之间的自动关联" class="headerlink" title="将default-ssl.conf映射至/etc/apache2/sites-enabled文件夹中建立软链接、实现二者之间的自动关联"></a>将default-ssl.conf映射至/etc/apache2/sites-enabled文件夹中建立软链接、实现二者之间的自动关联</h3><pre><code>sudo ln -s /etc/apache2/sites-available/default-ssl.conf /etc/apache2/sites-enabled/001-ssl.conf</code></pre><h3 id="重新加载Apache2配置文件"><a href="#重新加载Apache2配置文件" class="headerlink" title="重新加载Apache2配置文件"></a>重新加载Apache2配置文件</h3><pre><code>sudo /etc/init.d/apache2 force-reload</code></pre><h3 id="重新启动Apache2"><a href="#重新启动Apache2" class="headerlink" title="重新启动Apache2"></a>重新启动Apache2</h3><pre><code>sudo /etc/init.d/apache2 restart或者 sudo apache2ctl restart</code></pre><p>&emsp;&emsp;<strong>服务器安装https安全证书完成！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;个人博客怎么部署免费的https安全证书？&quot;&gt;&lt;a href=&quot;#个人博客怎么部署免费的https安全证书？&quot; class=&quot;headerlink&quot; title=&quot;个人博客怎么部署免费的https安全证书？&quot;&gt;&lt;/a&gt;个人博客怎么部署免费的https安全证书？&lt;/
      
    
    </summary>
    
      <category term="博客" scheme="https://codesong.work/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="ssl" scheme="https://codesong.work/tags/ssl/"/>
    
      <category term="https" scheme="https://codesong.work/tags/https/"/>
    
      <category term="安全证书" scheme="https://codesong.work/tags/%E5%AE%89%E5%85%A8%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java中内存的划分-学习笔记</title>
    <link href="https://codesong.work/posts/3a8013f5.html"/>
    <id>https://codesong.work/posts/3a8013f5.html</id>
    <published>2019-08-23T10:44:04.000Z</published>
    <updated>2020-04-22T11:23:50.000Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>任何计算机程序，如果想要运行，都需要开辟一块内存空间。</p></blockquote><hr><p>&emsp;&emsp;计算机整体的内存都是由操作系统来进行管理的，所以Java程序运行需要向计算机操作系统申请一块内存。这块专属内存被划分为了五部分，这样一来每一小块内存能被更好的使用和分门别类来管理。</p><h1 id="虚拟机栈（VM-Stack）"><a href="#虚拟机栈（VM-Stack）" class="headerlink" title="虚拟机栈（VM Stack）"></a>虚拟机栈（VM Stack）</h1><p>&emsp;&emsp;栈中执行每个方法的时候，方法中的局部变量都会存在这块内存中。jvm会创建一个栈帧来存储局部变量表，栈帧还存有：操作数栈，动态链接，方法出口等信息。</p><h1 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h1><p>&emsp;&emsp;堆是Java对象在内存中的存储区域，凡是用new出来的东西都在这里面。Java中的对象和数组都被分配在堆中。</p><p>堆内存里面的数据，都有默认值。规则：</p><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">默认值 </th></tr></thead><tbody><tr><td style="text-align:center">整型</td><td style="text-align:center">0 </td></tr><tr><td style="text-align:center">浮点型</td><td style="text-align:center">0.0</td></tr><tr><td style="text-align:center">字符型</td><td style="text-align:center">‘\u0000’</td></tr><tr><td style="text-align:center">布尔型</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">引用类型</td><td style="text-align:center">null</td></tr></tbody></table><h1 id="方法区-Method-Area"><a href="#方法区-Method-Area" class="headerlink" title="方法区(Method Area)"></a>方法区(Method Area)</h1><p>  它用于存储已被虚拟机加载的类信息，常量，静态变量，方法的信息，即时编译器编译后的代码等数据。</p><p><strong>注意：仅仅是包含了类的相关信息</strong></p><h1 id="本地方法栈（Native-Method-Stack）"><a href="#本地方法栈（Native-Method-Stack）" class="headerlink" title="本地方法栈（Native Method Stack）"></a>本地方法栈（Native Method Stack）</h1><p>  与虚拟机栈发挥的作用相似，相比于虚拟机栈为Java方法服务，本地方法栈为虚拟机使用的本地方法服务，执行每个本地方法的时候，都会创建一个栈帧用于存储局部变量表，操作数栈，动态链接，方法出口等信息。</p><p>  很多的算法或者一个功能的实现，都被java封装到了本地方法中，程序直接通过调用本地的方法就行了，本地方法栈就是用来存放这种方法的，实现该功能的代码可能是C也可能是C++,反正不一定就是java实现的。</p><h1 id="Program-Count-Register（PC寄存器，程序计数器）"><a href="#Program-Count-Register（PC寄存器，程序计数器）" class="headerlink" title="Program Count Register（PC寄存器，程序计数器）"></a>Program Count Register（PC寄存器，程序计数器）</h1><p>  指示Java虚拟机下一条需要执行的字节码指令。</p><p>  程序计数器是一块较小的内存区域，作用可以看做是当前线程执行的字节码的位置指示器。分支、循环、跳转、异常处理和线程恢复等基础功能都需要依赖这个计算器来完成。</p><hr><h2 id="以上五个区域是Java虚拟机内存划分情况，其中方法区和堆被JVM中多个线程共享，比如类的静态常量就被存放在方法区，供类对象之间共享，虚拟机栈，本地方法栈，pc寄存器是每个线程独立拥有的，不会与其他线程共享。-所以Java在通过new创建一个类对象实例的时候，一方面会在虚拟机栈中创建一个该对象的引用，另一方面会在堆上创建类对象的实例，然后将对象引用指向该对象的实例。对象引用存放在每一个方法对应的栈帧中。"><a href="#以上五个区域是Java虚拟机内存划分情况，其中方法区和堆被JVM中多个线程共享，比如类的静态常量就被存放在方法区，供类对象之间共享，虚拟机栈，本地方法栈，pc寄存器是每个线程独立拥有的，不会与其他线程共享。-所以Java在通过new创建一个类对象实例的时候，一方面会在虚拟机栈中创建一个该对象的引用，另一方面会在堆上创建类对象的实例，然后将对象引用指向该对象的实例。对象引用存放在每一个方法对应的栈帧中。" class="headerlink" title="  以上五个区域是Java虚拟机内存划分情况，其中方法区和堆被JVM中多个线程共享，比如类的静态常量就被存放在方法区，供类对象之间共享，虚拟机栈，本地方法栈，pc寄存器是每个线程独立拥有的，不会与其他线程共享。 所以Java在通过new创建一个类对象实例的时候，一方面会在虚拟机栈中创建一个该对象的引用，另一方面会在堆上创建类对象的实例，然后将对象引用指向该对象的实例。对象引用存放在每一个方法对应的栈帧中。"></a>  以上五个区域是Java虚拟机内存划分情况，其中方法区和堆被JVM中多个线程共享，比如类的静态常量就被存放在方法区，供类对象之间共享，虚拟机栈，本地方法栈，pc寄存器是每个线程独立拥有的，不会与其他线程共享。 所以Java在通过new创建一个类对象实例的时候，一方面会在虚拟机栈中创建一个该对象的引用，另一方面会在堆上创建类对象的实例，然后将对象引用指向该对象的实例。对象引用存放在每一个方法对应的栈帧中。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;任何计算机程序，如果想要运行，都需要开辟一块内存空间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;计算机整体的内存都是由操作系统来进行管理的，所以Java程序运行需要向计算机操作系统申请一块内存。这块专属
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://codesong.work/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="https://codesong.work/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>C#复习知识点提炼</title>
    <link href="https://codesong.work/posts/2b58aa48.html"/>
    <id>https://codesong.work/posts/2b58aa48.html</id>
    <published>2019-04-29T13:53:00.000Z</published>
    <updated>2019-08-22T12:46:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-知识点提炼期末复习专用"><a href="#C-知识点提炼期末复习专用" class="headerlink" title="C#知识点提炼期末复习专用"></a>C#知识点提炼期末复习专用</h1><hr><p>根据内部消息称，有三类题型：<br>程序阅读题：2题<br>简答题：2题 （主要是对概念的考查）<br>编程题：暂定2-3题  </p><p>复习要点：<br><strong>.net framework</strong><br>通用语言开发环境、.NET基础类库、.NET开发语言、visual studio.NET 集成开发环境</p><hr><h2 id="C-的特点"><a href="#C-的特点" class="headerlink" title="C#的特点"></a>C#的特点</h2><ol><li><p>语法简介</p></li><li><p>彻底的面向对象</p></li><li><p>与Web应用紧密结合</p></li><li><p>强大的安全机制</p></li><li><p>完善的错误、异常处理机制</p></li><li><p>灵活的版本处理技术</p></li><li><p>兼容性</p></li><li><p>（老师加的）全方位的跨平台支持</p></li></ol><h2 id="ASP-NET-Core"><a href="#ASP-NET-Core" class="headerlink" title="ASP.NET Core"></a>ASP.NET Core</h2><ol><li>跨平台 </li><li>开源</li></ol><h2 id="值类型和引用类型的区别"><a href="#值类型和引用类型的区别" class="headerlink" title="值类型和引用类型的区别"></a>值类型和引用类型的区别</h2><p>值类型：<strong>该类型的数据长度固定，存放于栈内</strong></p><p>引用类型：<strong>该类型的数据长度可变，存放于堆内</strong></p><h3 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h3><ol><li><p>abstract 抽象类，不能创建该类的实例，只能作为基类</p></li><li><p>internal 老师说，在同一程序内部访问而非指某一个命名空间内部，其它命名空间用using来使用</p></li><li><p>new 用于声明嵌套的类</p></li><li><p>private 用于声明私有嵌套类，只能在定义它的类中访问这个类</p></li><li><p>protected 用于声明保护型嵌套类，只能在定义它的类以及该类的子类中访问这个类</p></li><li><p>public 该类可以被任何其它类访问</p></li><li><p>sealed 该类不能被继承</p></li></ol><h2 id="类成员修饰符有四类"><a href="#类成员修饰符有四类" class="headerlink" title="类成员修饰符有四类"></a>类成员修饰符有四类</h2><ol><li><p>public 公有成员</p></li><li><p>Private 私有成员</p></li><li><p>Protected 保护成员</p></li><li><p>Internal 内部成员</p></li></ol><h1 id="构造函数、析构函数"><a href="#构造函数、析构函数" class="headerlink" title="构造函数、析构函数"></a>构造函数、析构函数</h1><p>&emsp;&emsp;构造函数与类名相同，开头public，无返回值，主要对类的实例初始化，实例类时自动执行</p><p>&emsp;&emsp;析构函数名比析构函数多加了一个符号 ’~’，与构造函数区别在于，该函数在对象销毁时执行</p><h1 id="继承、多态"><a href="#继承、多态" class="headerlink" title="继承、多态"></a>继承、多态</h1><p><strong>继承</strong>本质是代码重用（具体懒得写）</p><p><strong>多态</strong>就是将子类赋值给父类，可以在父类中通过调用抽象方法来实现子类的具体功能</p><p><strong>ASP.NET,page</strong>实例的生命周期自己找去</p><h1 id="方法的重载与区分"><a href="#方法的重载与区分" class="headerlink" title="方法的重载与区分"></a>方法的重载与区分</h1><p>&emsp;&emsp;重载指的是允许存在多个同名参数，而这些函数的参数呢，是不一样的，可以是类型不一样可以是个数不一样，然后再调用这个方法时，编译器可以按照输入的参数去调用适当的方法</p><h2 id="装箱和拆箱。重载。"><a href="#装箱和拆箱。重载。" class="headerlink" title="装箱和拆箱。重载。"></a>装箱和拆箱。重载。</h2><p>说简单点就是：把一个具体的子类对象赋值给了父类对象就可以理解为发生了装箱操作，将父类对象强转为具体的子类对象就是拆箱操作</p><p>里式转换法则：父类中包含的是子类对象，则可以强转成文子类对象</p><p>秀操作专用知识点</p><h1 id="c-面向对象的思想。"><a href="#c-面向对象的思想。" class="headerlink" title="c#面向对象的思想。"></a>c#面向对象的思想。</h1><p>面向对象的思想很简单，就是对象咯（似乎是废话）</p><p>面向对象是一种模块化的、以对象为基础的设计思想，现在被广泛应用于软件设计领域。</p><p>基本单元就是<strong>对象！对象！对象！</strong></p><p><strong>对象</strong>就是封装起来的代码块，功能模块？应该是的</p><p>本篇文章就是它的思想吧，太扯了跳过。。。</p><p>关键字 <strong>class</strong> 的使用和概念<br>定义类时需要用到的关键字</p><p>类是引用类型，在堆上分配地址</p><p>关键字<strong>struct</strong>的使用和概念<br>定义结构体是需要用到的关键字</p><p>结构体是值类型，在堆栈上分配地址（据网上所说堆栈就是栈，只是换了个抽象的名字，没具体了解）</p><h1 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h1><p>抽象方法：只包含了方法定义，但没有具体实现的方法，需要其子类或者子类的子类来具体实现。</p><p>抽象类：含有一个或多个抽象方法的类称为抽象类。抽象类不能被实例化，这是因为它包含了没有具体实现的方法。</p><ol><li>使用abstract关键字来定义抽象类和方法，使用格式如下</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SB</span> //定义了抽象类<span class="title">SB</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">DSB</span><span class="params">()</span></span>; <span class="comment">//定义了抽象方法DSB</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>子类继承抽象父类后，可以使用override关键字覆盖父类中的抽象方法，并做具体的实现，格式如下：</li></ol><p><strong>。。。。没有格式，把上面的abstract换成override就ojbk了</strong></p><h1 id="接口和类"><a href="#接口和类" class="headerlink" title="接口和类"></a>接口和类</h1><p>就是定义一组数据结构，通过这组数据结构可以调用组件对象的功能。反正和抽象类差不多，可以看成是类的模板</p><p>接口的特点、定义和使用<br>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SB</span>//关键字<span class="title">interface</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Int <span class="title">DSB</span><span class="params">()</span></span>;<span class="comment">//接口已规定是public，声明时不需要访问级别修饰</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类可以继承多个接口，实现接口中的方法不需要使用关键字“override”</p><p><strong>接口也可以实现多态，这和抽象类一样</strong>，书上一句很无语的话。。。</p><p>使用的时候就是子类继承啦。。。</p><h1 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别?"></a>抽象类和接口的区别?</h1><ol><li><p>抽象类除了拥有抽象成员以外，还可以拥有非抽象成员；而接口所有成员都是抽象的；</p></li><li><p>抽象成员可以是私有的，而接口一般都是公开的（不太清楚这里的“一般”，那么“不一般”又是什么呢？）；</p></li><li><p>接口中不能含有构造函数、析构函数、静态成员、和常量；</p></li><li><p>C#只支持单继承，一个子类只能继承一个父类。而一个子类却能继承多个接口</p></li></ol><h1 id="Using-关键字两种用法"><a href="#Using-关键字两种用法" class="headerlink" title="Using 关键字两种用法"></a>Using 关键字两种用法</h1><p>一种是引用命名空间，另一种是。。。老师课堂上的忘了，但网上查了，如下：</p><p>定义一个范围，在范围结束时处理对象。</p><p>场景：</p><p>当在某个代码段中使用了类的实例，而希望无论因为什么原因，只要离开了这个代码段就自动调用这个类实例的<strong>Dispose</strong>。</p><p>要达到这样的目的，用<strong>try…catch</strong>来捕捉异常也是可以的，但用<strong>using</strong>也很方便。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">using (Class1 cls1 = <span class="keyword">new</span> Class1(), cls2 = <span class="keyword">new</span> Class1())</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the code using cls1, cls2</span></span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// call the Dispose on cls1 and cls2</span></span><br></pre></td></tr></table></figure><p>网上说还有一种功能给命名空间起个“外号”。。。</p><h1 id="关键字new"><a href="#关键字new" class="headerlink" title="关键字new"></a>关键字new</h1><p>&emsp;&emsp;C#不允许在安全代码中使用指针，因此要处理对中的数据就需要使用引用类型，使用new关键字实例化引用数据类型的对象，并指向堆中的对象数据。</p><p>内置的引用类型有两种分别是System.Object和System.String</p><p>&emsp;&emsp;C#中数组也被看作一个带有方法和属性的对象，所以定义数组时，也需要用到new</p><h1 id="多态的特性及意义！"><a href="#多态的特性及意义！" class="headerlink" title="多态的特性及意义！"></a>多态的特性及意义！</h1><p>多态是面向对象的重要特性,简单点说:“一个接口，多种实现”，就是同一种事物表现出的多种形态。</p><p>对不同类的对象发出相同的消息将会有不同的行为，就是同一个处理手段可以用来处理多种不同的情况</p><p>没有继承就没有多态！</p><ol><li><p>提高了代码的维护性(继承保证)</p></li><li><p>提高了代码的扩展性(由多态保证)</p></li></ol><p>全是网上查的，这算是特性和意义吧。。。</p><h1 id="Namespace关键字"><a href="#Namespace关键字" class="headerlink" title="Namespace关键字"></a>Namespace关键字</h1><p>&emsp;&emsp;简单的说就是定义命名空间用的关键字，往复杂了说呢，说了也不懂，跳过</p><h1 id="流"><a href="#流" class="headerlink" title="流"></a>流</h1><p>流是.NET操作文件的基本类。对文件的输入输出操作都要用到流。流分为输入流和输出流。</p><p>懒得写了，课本165页。。。</p><p><strong><em>书本重点例题：p32   p82p83  p89-91  p97 p99 p117  p113（改写后的代码） p175</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-知识点提炼期末复习专用&quot;&gt;&lt;a href=&quot;#C-知识点提炼期末复习专用&quot; class=&quot;headerlink&quot; title=&quot;C#知识点提炼期末复习专用&quot;&gt;&lt;/a&gt;C#知识点提炼期末复习专用&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;根据内部消息称，有三类题型：&lt;br&gt;程序阅
      
    
    </summary>
    
      <category term="C#" scheme="https://codesong.work/categories/C/"/>
    
    
      <category term="复习" scheme="https://codesong.work/tags/%E5%A4%8D%E4%B9%A0/"/>
    
  </entry>
  
</feed>
